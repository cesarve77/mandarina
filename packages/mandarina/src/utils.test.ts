import {ensureId, generateRandomAlpha, generateRandomNumber, getParentsDot} from "./utils";

const fields = [
    'loggedAt',
    'reviewedAt',
    'parents',
    'parents.firstName',
    'parents.surname',
    'parents.user.email',
    'parents.contactPreferencesEmail',
    'parents.mobilePhone',
    'parents.contactPreferencesSms',
    'parents.nationality',
    'parents.gender',
    'parents.dateOfBirth',
    'parents.birthCountry',
    'parents.blueCard.number',
    'parents.blueCard.type',
    'parents.blueCard.expiryDate',
    'parents.blueCard.status',
    'parents.blueCard.registered',
    'parents.blueCard.notes',
    'contact.address.fullAddress',
    'contact.address.lat',
    'contact.address.lng',
    'contact.address.placeId',
    'contact.address.unit',
    'contact.address.number',
    'contact.address.street',
    'contact.address.suburb',
    'contact.address.city',
    'contact.address.state',
    'contact.address.zip',
    'contact.address.country',
    'contact.address.id',
    'children.firstName',
    'children.surname',
    'children.gender',
    'children.dateOfBirth',
    'children.nationality',
    'children.schoolName',
    'children.blueCard.number',
    'children.blueCard.type',
    'children.blueCard.expiryDate',
    'children.blueCard.status',
    'children.blueCard.registered',
    'children.blueCard.notes',
    'children.blueCard.id',
    'guests.firstName',
    'guests.surname',
    'guests.gender',
    'guests.dateOfBirth',
    'guests.nationality',
    'guests.relationship',
    'guests.blueCard.number',
    'guests.blueCard.type',
    'guests.blueCard.expiryDate',
    'guests.blueCard.status',
    'guests.blueCard.registered',
    'guests.blueCard.notes',
    'guests.blueCard.id',
    'pets.type',
    'pets.status',
    'bedrooms.beds',
    'bedrooms.desk',
    'bedrooms.clothesStorage',
    'bedrooms.ensuite',
    'bedrooms.id',
    'bank.name',
    'bank.account',
    'bank.bsb',
    'bank.number',
    'office.familyStatus',
    'office.familySubStatus',
    'office.familyScore',
    'office.homeScore',
    'office.files.id',
    'office.files.category',
    'office.files.width',
    'office.files.Height',
    'office.files.type',
    'office.files.size',
    'notes',
    'availability.from',
    'availability.to',
    'availability.reason',
    'inspections.date',
    'inspections.staff.firstName',
    'inspections.staff.surname',
    'inspections.staff.user.email',
    'inspections.familyStatus'
]
describe('util ', () => {
    test('ensureId',()=>{
        const result=ensureId(fields)
        console.log(result)
        expect(result).toMatchObject( [ 'loggedAt',
            'reviewedAt',
            'parents',
            'parents.id',
            'parents.firstName',
            'parents.surname',
            'parents.user.id',
            'parents.user.email',
            'parents.contactPreferencesEmail',
            'parents.mobilePhone',
            'parents.contactPreferencesSms',
            'parents.nationality',
            'parents.gender',
            'parents.dateOfBirth',
            'parents.birthCountry',
            'parents.blueCard.id',
            'parents.blueCard.number',
            'parents.blueCard.type',
            'parents.blueCard.expiryDate',
            'parents.blueCard.status',
            'parents.blueCard.registered',
            'parents.blueCard.notes',
            'contact.id',
            'contact.address.fullAddress',
            'contact.address.lat',
            'contact.address.lng',
            'contact.address.placeId',
            'contact.address.unit',
            'contact.address.number',
            'contact.address.street',
            'contact.address.suburb',
            'contact.address.city',
            'contact.address.state',
            'contact.address.zip',
            'contact.address.country',
            'contact.address.id',
            'children.id',
            'children.firstName',
            'children.surname',
            'children.gender',
            'children.dateOfBirth',
            'children.nationality',
            'children.schoolName',
            'children.blueCard.number',
            'children.blueCard.type',
            'children.blueCard.expiryDate',
            'children.blueCard.status',
            'children.blueCard.registered',
            'children.blueCard.notes',
            'children.blueCard.id',
            'guests.id',
            'guests.firstName',
            'guests.surname',
            'guests.gender',
            'guests.dateOfBirth',
            'guests.nationality',
            'guests.relationship',
            'guests.blueCard.number',
            'guests.blueCard.type',
            'guests.blueCard.expiryDate',
            'guests.blueCard.status',
            'guests.blueCard.registered',
            'guests.blueCard.notes',
            'guests.blueCard.id',
            'pets.id',
            'pets.type',
            'pets.status',
            'bedrooms.beds',
            'bedrooms.desk',
            'bedrooms.clothesStorage',
            'bedrooms.ensuite',
            'bedrooms.id',
            'bank.id',
            'bank.name',
            'bank.account',
            'bank.bsb',
            'bank.number',
            'office.id',
            'office.familyStatus',
            'office.familySubStatus',
            'office.familyScore',
            'office.homeScore',
            'office.files.id',
            'office.files.category',
            'office.files.width',
            'office.files.Height',
            'office.files.type',
            'office.files.size',
            'notes',
            'availability.id',
            'availability.from',
            'availability.to',
            'availability.reason',
            'inspections.id',
            'inspections.date',
            'inspections.staff.id',
            'inspections.staff.firstName',
            'inspections.staff.surname',
            'inspections.staff.user.id',
            'inspections.staff.user.email',
            'inspections.familyStatus' ])
    })
    test('generateRandomNumber',()=>{
        const r=generateRandomNumber(5,11)
        console.log('r',r)
        expect(r).toBeGreaterThanOrEqual(5)
        expect(r).toBeLessThanOrEqual(11)

    })
    test('generateRandomAlpha',()=>{
        const r=generateRandomAlpha(16)
        console.log('r',r)
        expect(r.length).toBe(16)


    })
    test("getParentsDot", () => {
        let parents=getParentsDot(fields)
        expect(parents).toMatchObject([ 'loggedAt',
            'reviewedAt',
            'parents',
            'contact',
            'children',
            'guests',
            'pets',
            'bedrooms',
            'bank',
            'office',
            'notes',
            'availability',
            'inspections' ])
    })

})
